<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize the player object



//instance variable
spd = 4;
hspd = 0;
vspd = 0;

//local variable
//var faster_spd = 10;
//spd = faster_spd;

//global variable
//global.faster_spd = 10;

//This is another comment
//Three lines at the top will show the comment in the action window.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control the player
var right = keyboard_check(vk_right);
var left = keyboard_check(vk_left);
var up = keyboard_check(vk_up);
var down = keyboard_check(vk_down);

//adding wall detecting &amp;&amp;
//place_meeting checks to see if an 
//object is there
if (right) {
    hspd = spd;
}

if (left) {
    hspd = -spd;
}

if (up) {
    vspd = -spd;
}

if (down) {
    vspd = spd;
}

//friction
if (!right &amp;&amp; !left) {
    hspd = 0;
    }
if (!up &amp;&amp; !down) {
    vspd = 0;
    }
         
//Horizontal Collisions
if (place_meeting(x+hspd, y, Solid)) {
    while (!place_meeting(x+sign(hspd), y, Solid)) {
        x+= sign(hspd);
        }
    hspd = 0;
}
x += hspd;

//Vertical Collisions
if (place_meeting(x, y+vspd, Solid)) {
    while (!place_meeting(x, y+sign(vspd), Solid)) {
        y+= sign(vspd);
        }
    vspd = 0;
    }
y += vspd;


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
